{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from \"next-auth\";\n\nexport default {\n\tproviders: [\n\t\tCredentials({\n\t\t\t// You can specify which fields should be submitted, by adding keys to the `credentials` object.\n\t\t\t// e.g. domain, username, password, 2FA token, etc.\n\t\t\tcredentials: {\n\t\t\t\temail: {},\n\t\t\t\tpassword: {},\n\t\t\t},\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tlet user = null;\n\n\t\t\t\t// logic to salt and hash password\n\t\t\t\tconst pwHash = saltAndHashPassword(credentials.password);\n\n\t\t\t\t// logic to verify if the user exists\n\t\t\t\tuser = await getUserFromDb(credentials.email, pwHash);\n\n\t\t\t\tif (!user) {\n\t\t\t\t\t// No user found, so this is their first attempt to login\n\t\t\t\t\t// Optionally, this is also the place you could do a user registration\n\t\t\t\t\tthrow new Error(\"Invalid credentials.\");\n\t\t\t\t}\n\n\t\t\t\t// return user object with their profile data\n\t\t\t\treturn user;\n\t\t\t},\n\t\t}),\n\t],\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;uCAEe;IACd,WAAW;QACV,YAAY;YACX,gGAAgG;YAChG,mDAAmD;YACnD,aAAa;gBACZ,OAAO,CAAC;gBACR,UAAU,CAAC;YACZ;YACA,WAAW,OAAO;gBACjB,IAAI,OAAO;gBAEX,kCAAkC;gBAClC,MAAM,SAAS,oBAAoB,YAAY,QAAQ;gBAEvD,qCAAqC;gBACrC,OAAO,MAAM,cAAc,YAAY,KAAK,EAAE;gBAE9C,IAAI,CAAC,MAAM;oBACV,yDAAyD;oBACzD,sEAAsE;oBACtE,MAAM,IAAI,MAAM;gBACjB;gBAEA,6CAA6C;gBAC7C,OAAO;YACR;QACD;KACA;AACF"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { NextRequest } from \"next/server\";\nimport authConfig from \"./auth.config\";\n\n// Use only one of the two middleware options below\n// 1. Use middleware directly\n// export const { auth: middleware } = NextAuth(authConfig)\n\n// 2. Wrapped middleware option\nconst { auth } = NextAuth(authConfig);\nexport default auth(async function middleware(req: NextRequest) {\n\tconsole.log(\"req: \", req);\n\n\t// Your custom middleware logic goes here\n});\n\nexport const config = {\n\tmatcher: [\"/((?!.*\\\\..*|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIA,mDAAmD;AACnD,6BAA6B;AAC7B,2DAA2D;AAE3D,+BAA+B;AAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,0WAAA,CAAA,UAAQ,AAAD,EAAE,qHAAA,CAAA,UAAU;uCACrB,KAAK,eAAe,WAAW,GAAgB;IAC7D,QAAQ,GAAG,CAAC,SAAS;AAErB,yCAAyC;AAC1C;AAEO,MAAM,SAAS;IACrB,SAAS;QAAC;QAA0B;QAAK;KAAkB;AAC5D"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}