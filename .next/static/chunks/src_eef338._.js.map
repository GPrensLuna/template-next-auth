{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/CN0550/go/src/template-next-auth/src/modules/app/UI/components/tags/form/components/form-input.component.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\";\n\nimport type { Control, FieldValues, Path } from \"react-hook-form\";\n\nimport { Controller } from \"react-hook-form\";\n\n\ninterface Props<T extends FieldValues> {\n  errors?: any;\n  name: Path<T>;\n  label: string;\n  type?: string;\n  placeholder?: string;\n  control: Control<T>;\n  classNameInput?: string;\n  classNameLabel?: string;\n\n}\n\nconst FormInput  = <T extends FieldValues>({\n  name,\n  type = \"text\",\n  placeholder = \"\",\n  control,\n  label,\n\n}: Props<T>): JSX.Element => {\n\n\n\n\n  return (\n    <article className=\"h-100vh w-100vw grid items-center justify-center\">\n      <label  htmlFor={name}>\n        {label}\n      </label>\n\n      <Controller\n        control={control}\n        name={name}\n        render={({ field, fieldState: { error } }) => (\n          <>\n            <input\n              {...field}\n              id={name as string}\n              name={name as string}\n              placeholder={placeholder}\n              type={type}\n              onBlur={field.onBlur}\n            />\n            <p className=\"mt-1 h-4 text-sm text-red-500\">{error ? error.message : \" \"}</p>\n          </>\n        )}\n      />\n    </article>\n  );\n};\n\nexport default FormInput;\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;AAKrD;AAJA;;;AAmBA,MAAM,YAAa,CAAwB,EACzC,IAAI,EACJ,OAAO,MAAM,EACb,cAAc,EAAE,EAChB,OAAO,EACP,KAAK,EAEI;IAKT,qBACE,sYAAC;QAAQ,WAAU;;0BACjB,sYAAC;gBAAO,SAAS;0BACd;;;;;;0BAGH,sYAAC,wRAAA,CAAA,aAAU;gBACT,SAAS;gBACT,MAAM;gBACN,QAAQ,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,iBACvC;;0CACE,sYAAC;gCACE,GAAG,KAAK;gCACT,IAAI;gCACJ,MAAM;gCACN,aAAa;gCACb,MAAM;gCACN,QAAQ,MAAM,MAAM;;;;;;0CAEtB,sYAAC;gCAAE,WAAU;0CAAiC,QAAQ,MAAM,OAAO,GAAG;;;;;;;;;;;;;;;;;;;AAMlF;KArCM;uCAuCS"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/CN0550/go/src/template-next-auth/src/modules/app/UI/components/tags/form/form-custom.component.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ReactNode } from \"react\";\nimport type { DefaultValues, FieldValues, SubmitHandler } from \"react-hook-form\";\nimport type { z } from \"zod\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { FormProvider, useForm } from \"react-hook-form\";\n\n\ninterface FormCustomProps<T extends FieldValues> {\n  children: (methods: ReturnType<typeof useForm<T>>) => ReactNode;\n  defaultValues: DefaultValues<T>;\n  schema: z.ZodSchema<T>;\n  mode: \"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\";\n  className?: string;\n  onSubmit: SubmitHandler<T>;\n  isPending?: boolean;\n  btmLoader?: string;\n  btmLabel?: string;\n  btmClassName?: string;\n}\n\n\nconst FormCustom = <T extends FieldValues>({\n  children,\n  defaultValues,\n  schema,\n  mode,\n  isPending,\n  btmLoader,\n  btmLabel,\n  onSubmit,\n}: FormCustomProps<T>): JSX.Element => {\n  const methods = useForm<T>({\n    resolver: zodResolver(schema),\n    defaultValues,\n    mode,\n  });\n\n  return (\n    <FormProvider {...methods}>\n      <form\n        onSubmit={methods.handleSubmit(onSubmit)}>\n        {children(methods)}\n        <button\n          disabled={isPending}\n          type=\"submit\">\n          <span className=\"font-mono text-xl font-bold uppercase text-secondary-custom\">\n            {isPending ? btmLoader : btmLabel}\n          </span>\n        </button>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default FormCustom;\n"],"names":[],"mappings":";;;;AAMA;AACA;;;AAPA;;;AAwBA,MAAM,aAAa,CAAwB,EACzC,QAAQ,EACR,aAAa,EACb,MAAM,EACN,IAAI,EACJ,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACW;;IACnB,MAAM,UAAU,CAAA,GAAA,wRAAA,CAAA,UAAO,AAAD,EAAK;QACzB,UAAU,CAAA,GAAA,gUAAA,CAAA,cAAW,AAAD,EAAE;QACtB;QACA;IACF;IAEA,qBACE,sYAAC,wRAAA,CAAA,eAAY;QAAE,GAAG,OAAO;kBACvB,cAAA,sYAAC;YACC,UAAU,QAAQ,YAAY,CAAC;;gBAC9B,SAAS;8BACV,sYAAC;oBACC,UAAU;oBACV,MAAK;8BACL,cAAA,sYAAC;wBAAK,WAAU;kCACb,YAAY,YAAY;;;;;;;;;;;;;;;;;;;;;;AAMrC;GA/BM;;QAUY,wRAAA,CAAA,UAAO;;;KAVnB;uCAiCS"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/CN0550/go/src/template-next-auth/src/modules/auth/domain/validations/sign-in.zod.ts"],"sourcesContent":["// Importa la biblioteca zod para la validación de esquemas\nimport z from \"zod\";\n\n//* Define un esquema de validación para el inicio de sesión\nexport const signInSchema = z.object({\n\t//? Campo de correo electrónico que debe ser una cadena con formato de correo electrónico\n\temail: z.string().email(),\n\t//? Campo de contraseña que debe ser una cadena\n\tpassword: z.string(),\n});\n\n//* Define un tipo TypeScript basado en el esquema de validación\nexport type SignInType = z.infer<typeof signInSchema>;\n\n//* Valores iniciales para el formulario de inicio de sesión\nexport const SignInInitValue = {\n\t//? Valor inicial del correo electrónico vacío\n\temail: \"\",\n\t//? Valor inicial de la contraseña vacía\n\tpassword: \"\",\n};\n"],"names":[],"mappings":"AAAA,2DAA2D;;;;;AAC3D;;AAGO,MAAM,eAAe,wLAAA,CAAA,UAAC,CAAC,MAAM,CAAC;IACpC,yFAAyF;IACzF,OAAO,wLAAA,CAAA,UAAC,CAAC,MAAM,GAAG,KAAK;IACvB,+CAA+C;IAC/C,UAAU,wLAAA,CAAA,UAAC,CAAC,MAAM;AACnB;AAMO,MAAM,kBAAkB;IAC9B,8CAA8C;IAC9C,OAAO;IACP,wCAAwC;IACxC,UAAU;AACX"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/CN0550/go/src/template-next-auth/src/modules/auth/UI/pages/sign-in.page.tsx"],"sourcesContent":["\"use client\";\nimport FormInput from \"@/modules/app/UI/components/tags/form/components/form-input.component\";\nimport FormCustom from \"@/modules/app/UI/components/tags/form/form-custom.component\";\nimport { SignInInitValue, signInSchema, SignInType } from \"../../domain/validations/sign-in.zod\";\n\nconst SignIn = () => {\n\n\tconst onSubmit = (data: any) => {\n\t\tconsole.log(\"data: \", data);\n\t}\n\treturn (\n\t\t<FormCustom<SignInType>\n\t\t\tonSubmit={onSubmit}\n\t\t\tdefaultValues={SignInInitValue}\n\t\t\tschema={signInSchema}\n\t\t\tisPending={false}\n\t\t\tmode=\"onSubmit\"\n\t\t\t>\n\t\t\t{({ control}) => (\n\t\t\t\t<>\n\t\t\t\t\t<FormInput<SignInType>\n\t\t\t\t\t\tcontrol={control}\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t/>\n\t\t\t\t\t<FormInput<SignInType>\n\t\t\t\t\t\tcontrol={control}\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</FormCustom>\n\t)\n}\n\nexport default SignIn"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;;;;;AAKA,MAAM,SAAS;IAEd,MAAM,WAAW,CAAC;QACjB,QAAQ,GAAG,CAAC,UAAU;IACvB;IACA,qBACC,sYAAC,4LAAA,CAAA,UAAU;QACV,UAAU;QACV,eAAe,uKAAA,CAAA,kBAAe;QAC9B,QAAQ,uKAAA,CAAA,eAAY;QACpB,WAAW;QACX,MAAK;kBAEJ,CAAC,EAAE,OAAO,EAAC,iBACX;;kCACC,sYAAC,yMAAA,CAAA,UAAS;wBACT,SAAS;wBACT,MAAK;wBACL,OAAM;wBACN,aAAY;;;;;;kCAEb,sYAAC,yMAAA,CAAA,UAAS;wBACT,SAAS;wBACT,MAAK;wBACL,OAAM;wBACN,aAAY;;;;;;;;;;;;;AAMlB;KA/BM;uCAiCS"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}